name: Update Tickers

on:
  repository_dispatch:
    types: [update_ticker]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  handle-dispatch:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install pandas

      - name: Handle Dispatch
        run: |
          echo "Handling dispatch for action ${{ github.event.client_payload.action }}"
          echo "${{ toJson(github.event.client_payload) }}" > payload.json

          python -c "
import sqlite3
import json

with open('payload.json', 'r') as f:
    payload = json.load(f)

action = payload['action']
ticker = payload['ticker'].upper()

conn = sqlite3.connect('Stock Data.db')
cursor = conn.cursor()

if action == 'add_update':
    growth_rate = float(payload['growth_rate'].rstrip('%'))
    profit_margin = float(payload['profit_margin'].rstrip('%'))

    cursor.execute('''
        INSERT INTO Tickers_Info (ticker, nicks_growth_rate, profit_margin)
        VALUES (?, ?, ?)
        ON CONFLICT(ticker) DO UPDATE SET
        nicks_growth_rate=excluded.nicks_growth_rate,
        profit_margin=excluded.profit_margin;
    ''', (ticker, growth_rate, profit_margin))

    conn.commit()
    print(f'Updated ticker {ticker} with growth rate {growth_rate} and profit margin {profit_margin}')

elif action == 'remove':
    cursor.execute('''
        DELETE FROM Tickers_Info WHERE ticker = ?;
    ''', (ticker,))

    conn.commit()
    print(f'Removed ticker {ticker}')

conn.close()
"
